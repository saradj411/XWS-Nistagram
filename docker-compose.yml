version: "3.7"

services:
  eureka-serviceregistry:
    image: eureka-serviceregistry
    container_name: eureka-serviceregistry
    build: ./eureka
    tty: true
    networks:
      - demo
    ports:
      - "8761:8761"


  profile-microservice:
    image: profile-microservice
    container_name: profile-microservice
    build:
      context: ./profile-microservice
      dockerfile: Dockerfile
    tty: true
    restart: on-failure
    networks:
      - demo
    ports:
      - "8086:8086"
    environment:
      DATABASE_USERNAME: root
      DATABASE_PASSWORD: root
      DATABASE_DOMAIN: mysql
      DATABASE_SCHEMA: profileMicroservice?createDatabaseIfNotExist=true&serverTimezone=UTC
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-serviceregistry:8761/eureka/
    depends_on:
      - eureka-serviceregistry
      - mysql

  media-microservice:
    image: media-microservice
    container_name: media-microservice
    build: ./media-microservice
    tty: true
    restart: on-failure
    networks:
      - demo
    ports:
      - "8085:8085"
    environment:
      DATABASE_USERNAME: root
      DATABASE_PASSWORD: root
      DATABASE_DOMAIN: mysql
      DATABASE_SCHEMA: mediaMicroservice?createDatabaseIfNotExist=true&serverTimezone=UTC
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-serviceregistry:8761/eureka/
    depends_on:
      - eureka-serviceregistry
      - mysql


  frontend-isa:
    build: ./frontend-isa
    container_name: frontend-isa
    restart: on-failure
    networks:
      - demo
    ports:
      - "8081:8080"


  zuul:
    image: zuul
    container_name: zuul
    build: ./zuul
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-serviceregistry:8761/eureka/
    tty: true
    networks:
      - demo
    ports:
      - "8083:8083"
    depends_on:
      - eureka-serviceregistry
      - profile-microservice
      - media-microservice
      

  mysql:
    image: mysql:8.0.19
    container_name: mysql
    restart: always
    ports:
     - "3307:3306"
    networks:
      - demo
    volumes:
      - ./mysql:/docker-entrypoint-initdb.d
    cap_add:
      - SYS_NICE  # CAP_SYS_NICE
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: root
      MYSQL_PASSWORD: root


networks:
  demo:
    name: demo
    driver: bridge